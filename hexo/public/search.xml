<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Hexo 在 Github 搭建个人网站</title>
      <link href="/hexo-template/hexo/public/website/hexo-da-jian-ge-ren-wang-zhan/"/>
      <url>/hexo-template/hexo/public/website/hexo-da-jian-ge-ren-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用 <a href="https://hexo.io/docs/">Hexo</a> 可以在 Github Page 搭建个人博客，但从零开始搭建过程较为繁琐，故做了此模板以简化创建流程。</p><p>Hexo 至少需要两个相关的 Github 仓库，如：</p><ul><li><a href="https://github.com/lyy289065406/hexo-template"><code>hexo-template</code></a>： 用于【管理】和【数据存储】，可运行测试环境</li><li><a href="https://github.com/lyy289065406/articles"><code>articles</code></a>： 用于生产环境【展示】内容</li></ul><blockquote><p>Fork <a href="https://github.com/lyy289065406/hexo-template"><code>hexo-template</code></a> 并改名，即可作为自定义博客的管理后台；<a href="https://github.com/lyy289065406/articles"><code>articles</code></a> 则自建一个任意命名的空仓库即可；下文会继续沿用这两个名称以便于说明</p></blockquote><p>各个环境的站点 URL 如下：</p><ul><li>本地测试环境： <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a></li><li>线上测试环境： <a href="https://lyy289065406.github.io/hexo-template/">https://lyy289065406.github.io/hexo-template/</a></li><li>线上生产环境： <a href="https://exp-blog.com/">https://exp-blog.com</a> 或 <a href="https://lyy289065406.github.io/articles/">https://lyy289065406.github.io/articles/</a></li></ul><blockquote><p>域名只是举例，实际使用时按需修改即可</p></blockquote><h2 id="部署说明"><a href="#部署说明" class="headerlink" title="部署说明"></a>部署说明</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>任意找一台 Linux/Windows/Mac 服务器（阿里云、腾讯云等）</li><li>安装 Docker</li><li>把当前仓库 checkout 到服务器： <code>git clone https://github.com/lyy289065406/hexo-template</code></li><li>新建名为 articles 的空仓库（用于发布正式环境的博客内容）： <code>https://github.com/lyy289065406/articles</code></li><li>设置宿主机可使用 SSH 与 Github 连接（用于把 Hexo 内容发布到正式环境），可参考 <a href="https://help.github.com/en/articles/connecting-to-github-with-ssh">官方教程</a>：主要就是把配置存储在 <code>~/.ssh/</code> 下的 SSH 公钥设置到 Github （首次设置完成后须在宿主机执行 <code>ssh -T git@github.com</code> 命令信任连接）</li></ul><blockquote><p><a href="https://github.com/lyy289065406/hexo-template"><code>hexo-template</code></a> 和 <a href="https://github.com/lyy289065406/articles"><code>articles</code></a> 两个仓库均要开通 GitHub Pages 服务</p></blockquote><h3 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h3><p>初始化用于 Hexo 运行的 Docker 环境镜像：</p><p><code>./init.sh -e "${GITHUB_EMAIL}" -u "${GITHUB_USER}" -n "${DEPLOY_REPO_NAME}" -d "${BLOG_DOMAIN}"</code></p><p>其中要用到的参数如下：</p><ul><li><code>GITHUB_EMAIL</code>： Github 的 Email</li><li><code>GITHUB_USER</code>： Github 的账号</li><li><code>DEPLOY_REPO_NAME</code>： 正式环境的 Github 仓库名称，用于发布博客内容（可以新建仓库，但不能是当前仓库）</li><li><code>BLOG_DOMAIN</code>: 博客域名，若未申请可留空（此时自动使用 Github Page 的子域名）</li></ul><blockquote><p>示例： <code>./init.sh -e "289065406@qq.com" -u "lyy289065406" -n "articles" -d "exp-blog.com"</code></p></blockquote><h3 id="插件安装（可选）"><a href="#插件安装（可选）" class="headerlink" title="插件安装（可选）"></a>插件安装（可选）</h3><ul><li>安装： <code>./exec.sh npm i --save ${PLUGIN_NAME}</code></li><li>卸载： <code>./exec.sh npm uninstall ${PLUGIN_NAME}</code></li><li>更新： <code>./exec.sh npm install --save</code></li></ul><h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><p>可以通过命令直接创建新文章： <code>./exec.sh hexo new ${ARTICLE_TITLE}</code></p><p>该命令会在 <a href="hexo/source/_posts"><code>hexo/source/_posts/</code></a> 目录下创建 2 个文件：</p><ul><li><code>${ARTICLE_TITLE}</code>： 该文章的资源目录</li><li><code>${ARTICLE_TITLE}.md</code>： 该文章的 markdown 文件，其默认内容只有 <a href="https://hexo.io/zh-cn/docs/front-matter.html">Front-matter</a> 区域：</li></ul><pre><code>---title: ${ARTICLE_TITLE}date: 2020-09-06 03:15:13tags:---</code></pre><p>也可以直接在 <a href="hexo/source/_posts"><code>hexo/source/_posts/</code></a> 目录下创建 markdown 文件和同名目录，效果是一样的。</p><h3 id="构建博客内容"><a href="#构建博客内容" class="headerlink" title="构建博客内容"></a>构建博客内容</h3><p>执行 <code>./build.sh</code> 或 <code>./build.sh -e test</code> 均可。</p><p>该命令会根据 <a href="hexo/source"><code>hexo/source/</code></a> 目录下的 markdown 文件在 <a href="hexo/public"><code>hexo/public/</code></a> 目录下生成 html 格式的站点内容。</p><h3 id="启动-Hexo-服务（本地测试环境）"><a href="#启动-Hexo-服务（本地测试环境）" class="headerlink" title="启动 Hexo 服务（本地测试环境）"></a>启动 Hexo 服务（本地测试环境）</h3><p>执行 <code>./run.sh</code> 或 <code>./run.sh -p ${PORT}</code> 均可，服务默认在 4000 端口。</p><blockquote><p>本地测试环境 URL： <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000</a> </p></blockquote><h3 id="停止-Hexo-服务"><a href="#停止-Hexo-服务" class="headerlink" title="停止 Hexo 服务"></a>停止 Hexo 服务</h3><p>执行 <code>./stop.sh</code> 即可。</p><h3 id="发布内容（线上测试环境）"><a href="#发布内容（线上测试环境）" class="headerlink" title="发布内容（线上测试环境）"></a>发布内容（线上测试环境）</h3><p>执行以下命令把本仓库的变更内容提交到 Github 即可：</p><ul><li><code>git add --all</code></li><li><code>git commit -m "deploy to test"</code></li><li><code>git push</code></li></ul><blockquote><p>线上测试环境 URL： <a href="https://lyy289065406.github.io/hexo-template/">https://lyy289065406.github.io/hexo-template/</a></p></blockquote><h3 id="发布内容（线上正式环境）"><a href="#发布内容（线上正式环境）" class="headerlink" title="发布内容（线上正式环境）"></a>发布内容（线上正式环境）</h3><p>执行 <code>./build.sh -e prod</code> 即可。</p><ul><li>若有自定义域名，直接执行： <code>./build.sh -e prod</code></li><li>若无自定义域名，则需声明，此时会使用 Github 子域名： <code>./build.sh -e prod -d no</code></li></ul><blockquote><p>线上正式环境 URL：<br><br>　　已绑定自定义域名： <a href="https://exp-blog.com/">https://exp-blog.com</a><br><br>　　未绑定自定义域名： <a href="https://lyy289065406.github.io/articles/">https://lyy289065406.github.io/articles/</a></p></blockquote><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><pre><code>hexo-template├── hexo ................................. 通过 hexo init 命令生成的工作目录│   ├── node_modules ..................... 插件目录，npm install 命令会根据 package.json 安装│   ├── themes ........................... 主题目录，从 https://hexo.io/themes/ 按喜好选择即可│   │   └── * ............................ 每个主题一个独立目录│   │       ├── languages ................ 该主题支持的语言环境│   │       └── _config.yml .............. 主题配置文件│   ├── scaffolds ........................ 模板目录│   │   ├── draft ........................ 草稿模板│   │   ├── post ......................... 文章模板│   │   └── page ......................... 页面模板│   ├── source ........................... Markdown 资源目录│   │   ├── _data ........................ 可被 Hexo/主题/插件 引用的公共数据目录│   │   ├── download ..................... 存储本地下载资源的目录│   │   ├── images ....................... 可被文章引用的公共图片目录│   │   ├── _draft ....................... Markdown 草稿目录（不会发布）│   │   ├── _posts ....................... Markdown 文章/资源目录│   │   ├── categories ................... 【分类】页面│   │   ├── tags ......................... 【标签】页面│   │   ├── friends ...................... 【友情链接】页面│   │   ├── concat ....................... 【解锁指引】页面│   │   └── about ........................ 【关于】页面│   ├── public ........................... Html 站点目录（根据 source 生成）│   ├── .deploy_git ...................... Html 发布目录（根据 public 生成）│   ├── db.json .......................... 用于生成站点数据的缓存文件│   ├── package.json ..................... 记录 hexo 及其插件版本│   ├── package-lock.json ................ 记录实际安装的各个插件的具体来源和版本号│   ├── yarn.lock ........................ 由 Yarn 自动创建，并且完全通过 Yarn 进行操作│   └── _config.yml ...................... Hexo 配置文件├── .gitignore ........................... git 忽略文件├── .nojekyll ............................ 声明忽略 jekyll ，避免 Github Pages 构建失败├── init.sh/ps1 .......................... 构建 hexo 的 docker 环境的脚本├── build.sh/ps1 ......................... 生成 hexo 发布内容的的脚本├── run.sh/ps1 ........................... 运行 hexo 服务（测试环境）├── stop.sh/ps1 .......................... 停止 hexo 服务（测试环境）├── exec.sh/ps1 .......................... 利用 docker 环境执行任意 hexo 命令的脚本├── to_sha256.sh/ps1 ..................... 用于设置文章密码的脚本├── index.html ........................... 可自动跳转到 hexo/public/index.html 页面 └── README.md ............................ 本仓库的说明文档</code></pre><h2 id="关于-Front-matter"><a href="#关于-Front-matter" class="headerlink" title="关于 Front-matter"></a>关于 Front-matter</h2><p>Hexo 的 Markdown 文章头部支持设置 <code>Front-matter</code> 区域，该区域的可选配置如下：</p><blockquote><p>所有配置项均为<strong>非必填</strong>的，但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值</p></blockquote><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol><p>最简示例：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最全示例：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 文章标题<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> EXP<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li>《<a href="https://hexo.io/zh-cn/docs/">Hexo 指引手册</a>》</li><li>《<a href="https://hexo.io/themes/">Hexo 主题列表</a>》</li><li>《<a href="https://yuchen-lea.github.io/2016-01-18-hexo-dir-struct/">Hexo 目录结构</a>》</li><li>《<a href="https://juejin.im/post/6844903590369181703">Github Pages部署个人博客（Hexo篇）</a>》</li><li>《<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a>》</li><li>《<a href="https://chunchengwei.github.io/ruan-jian/ji-yu-docker-de-hexo-bo-ke-da-jian/">基于Docker的Hexo博客搭建</a>》</li><li>《<a href="https://juejin.im/post/6844904082042257415">基于Hexo的matery主题搭建博客并深度优化</a>》</li><li>《<a href="https://juejin.im/post/6844904147922190344">Hexo 主题 Matery 配置</a>》</li><li>《<a href="https://usedfire.net/Notes/Hexo/make-hexo-post-category-by-folder/">Hexo - 使文章依文章分類為資料夾名稱置放</a>》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫码赞助</title>
      <link href="/hexo-template/hexo/public/demo/demo-1/"/>
      <url>/hexo-template/hexo/public/demo/demo-1/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">支付宝</th><th align="center">微信</th></tr></thead><tbody><tr><td align="center"><img src="alipay.png"></td><td align="center"><img src="wechat.png"></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 赞助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sponsor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例文章 2</title>
      <link href="/hexo-template/hexo/public/demo/demo-2/"/>
      <url>/hexo-template/hexo/public/demo/demo-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-二级标题"><a href="#1-二级标题" class="headerlink" title="1. 二级标题"></a>1. 二级标题</h2><p>xxxxx</p><h2 id="1-1-三级标题"><a href="#1-1-三级标题" class="headerlink" title="1.1. 三级标题"></a>1.1. 三级标题</h2><p>xxxxx</p><h2 id="1-2-三级标题"><a href="#1-2-三级标题" class="headerlink" title="1.2. 三级标题"></a>1.2. 三级标题</h2><p>xxxxx</p><h2 id="2-二级标题"><a href="#2-二级标题" class="headerlink" title="2. 二级标题"></a>2. 二级标题</h2><p>xxxxx</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
